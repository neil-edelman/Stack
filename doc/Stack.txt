# Stack.h #

2016 Neil Edelman, distributed under the terms of the MIT License;
 see readme.txt, or [ https://opensource.org/licenses/MIT ].

 _<T>Stack_ is a dynamic array that stores unordered _<T>_ in a stack; that is,
 the most basic variable array. Indices will remain the same throughout the
 lifetime of the data, but expanding the data may change the pointers. You
 cannot shrink the capacity of this data type, only cause it to grow. Resizing
 incurs amortised cost, done though a Fibonacci sequence. _<T>Stack_ is not
 synchronised. The preprocessor macros are all undefined at the end of the file
 for convenience when including multiple _<T>Stack_ types in the same file.

parameter: STACK_NAME -- This literally becomes _<T>_. As it's used in function names, this should
 comply with naming rules and be unique; required.

parameter: STACK_TYPE -- The type associated with _<T>_. Has to be a valid type, accessible to the
 compiler at the time of inclusion; required.

parameter: STACK_MIGRATE -- If set, the constructor has two extra arguments that allow it to be part of a
 larger data structure without referencing the _<T>Stack_.

parameter: STACK_TO_STRING -- Optional print function implementing _<T>ToString_; makes available
 `<T>StackToString`.

parameter: STACK_DEBUG -- Prints information to _stderr_. Requires _STACK_TO_STRING_.

parameter: STACK_TEST -- Unit testing framework using _<T>StackTest_, included in a separate
 header, _../test/StackTest.h_. Must be defined equal to a (random) filler
 function, satisfying _<T>Action_. If _NDEBUG_ is not defined, turns on
 _assert_ private function integrity testing. Requires _STACK_TO_STRING_.

minimum standard: C89/90

author: Neil

version: 2017-11 Added STACK_MIGRATE.

since: 2017-11 Forked from Pool.



## Declarations ##

### struct Migrate ###

struct Migrate

Contains information about a _realloc_.


### typedef void (*Migrate)(void *const parent,
	const struct Migrate *const migrate) ###

typedef void (*Migrate)(void *const parent,
	const struct Migrate *const migrate)

Function call on _realloc_.


### typedef void (*<T>Action)(T *const element) ###

typedef void (*<T>Action)(T *const element)

Operates by side-effects only. Used for _STACK_TEST_.


### typedef void (*<T>StackMigrateElement)(T *const element,
	const struct Migrate *const migrate) ###

typedef void (*<T>StackMigrateElement)(T *const element,
	const struct Migrate *const migrate)

Given to `<T>StackMigrateEach` by the migrate function of another
 datatype.


### typedef void (*<T>ToString)(const T *, char (*const)[12]) ###

typedef void (*<T>ToString)(const T *, char (*const)[12])

Responsible for turning _<T>_ (the first argument) into a 12 _char_
 null-terminated output string (the second.) Used for _STACK_TO_STRING_.


### struct <T>Stack ###

struct <T>Stack

The stack. To instantiate, see `<T>Stack`.




## Function Summary ##

_Return Type_	_Function Name_	_Argument List_
static void	<T>Stack_	(struct <T>Stack **const thisp)
static struct <T>Stack *	<T>Stack	(const Migrate migrate, void *const parent)
static struct <T>Stack *	<T>Stack	(void)
static const char *	<T>StackGetError	(struct <T>Stack *const this)
static size_t	<T>StackGetSize	(const struct <T>Stack *const this)
static T *	<T>StackGetElement	(struct <T>Stack *const this, const size_t idx)
static T *	<T>StackPeek	(const struct <T>Stack *const this)
static T *	<T>StackPop	(struct <T>Stack *const this)
static size_t	<T>StackGetIndex	(struct <T>Stack *const this,
	const T *const element)
static int	<T>StackReserve	(struct <T>Stack *const this,
	const size_t min_capacity)
static T *	<T>StackNew	(struct <T>Stack *const this)
static void	<T>StackClear	(struct <T>Stack *const this)
static void	<T>StackForEach	(struct <T>Stack *const this,
	const <T>Action action)
static void	<T>StackMigrateEach	(struct <T>Stack *const this,
	const <T>StackMigrateElement handler, const struct Migrate *const migrate)
static void	<T>MigratePointer	(T **const node_ptr,
	const struct Migrate *const migrate)
static const char *	<T>StackToString	(const struct <T>Stack *const this)



## Function Detail ##

### <T>Stack_ ###

static void <T>Stack_(struct <T>Stack **const thisp)

Destructor for _Stack_. Make sure that the stack's contents will not be
 accessed anymore.

parameter: thisp -- A reference to the object that is to be deleted; it will be
 stack to null. If it is already null or it points to null, doesn't do anything.

order: \Theta(1)



### <T>Stack ###

static struct <T>Stack * <T>Stack(const Migrate migrate, void *const parent)

Constructs an empty _Stack_ with capacity Fibonacci6, which is 8. This
 is the constructor if STACK_MIGRATE is specifed.

parameter: migrate, parent -- Can be both null.

return: A new _Stack_.

throws: STACK_PARAMETER, STACK_ERRNO -- Use _StackError(0)_ to get the error.

order: \Theta(1)

fixme: Untested.



### <T>Stack ###

static struct <T>Stack * <T>Stack(void)

Constructs an empty _Stack_ with capacity Fibonacci6, which is 8.

return: A new _Stack_.

throws: STACK_ERRNO -- Use _StackError(0)_ to get the error.

order: \Theta(1)



### <T>StackGetError ###

static const char * <T>StackGetError(struct <T>Stack *const this)

See what's the error if something goes wrong. Resets the error.

return: The last error string.

order: \Theta(1)



### <T>StackGetSize ###

static size_t <T>StackGetSize(const struct <T>Stack *const this)



return: The current size of the stack.

order: \Theta(1)



### <T>StackGetElement ###

static T * <T>StackGetElement(struct <T>Stack *const this, const size_t idx)

Gets an existing element by index. Causing something to be added to the
 _Stack_ may invalidate this pointer.

parameter: this -- If _this_ is null, returns null.

parameter: idx -- Index.

return: If failed, returns a null pointer and the error condition will be set.

throws: STACK_OUT_OF_BOUNDS

order: \Theta(1)



### <T>StackPeek ###

static T * <T>StackPeek(const struct <T>Stack *const this)



return: The last value to be added or null if the stack is empty. The
 pointer is valid until the stack gets bigger.

order: \Theta(1)



### <T>StackPop ###

static T * <T>StackPop(struct <T>Stack *const this)

Decreases the size of the stack. The pointer is valid until the stack gets
 bigger.

return: One value from the stack or null if the stack is empty.

order: \Theta(1)



### <T>StackGetIndex ###

static size_t <T>StackGetIndex(struct <T>Stack *const this,
	const T *const element)

Gets an index given an element. If the element is not part of the _Stack_,
 behaviour is undefined.

order: \Theta(1)



### <T>StackReserve ###

static int <T>StackReserve(struct <T>Stack *const this,
	const size_t min_capacity)

Increases the capacity of this Stack to ensure that it can hold at least
 the number of elements specified by the _min_capacity_.

parameter: this -- If _this_ is null, returns false.

return: True if the capacity increase was viable; otherwise the stack is not
 touched and the error condition is stack.

throws: STACK_ERRNO, STACK_OVERFLOW

order: \Omega(1), O(_capacity_)



### <T>StackNew ###

static T * <T>StackNew(struct <T>Stack *const this)

Gets an uninitialised new element at the end of the stack. May move the
 stack to a new memory location to fit the new size.

parameter: this -- If _this_ is null, returns null.

return: If failed, returns a null pointer and the error condition will be set.

throws: STACK_OVERFLOW, STACK_ERRNO

order: amortised O(1)



### <T>StackClear ###

static void <T>StackClear(struct <T>Stack *const this)

Removes all data from _this_.

order: \Theta(1)



### <T>StackForEach ###

static void <T>StackForEach(struct <T>Stack *const this,
	const <T>Action action)

Iterates though the _Stack_ and calls _action_ on all the elements.

throws: STACK_PARAMETER

order: O(_size_) O(_action_)

fixme: Untested.



### <T>StackMigrateEach ###

static void <T>StackMigrateEach(struct <T>Stack *const this,
	const <T>StackMigrateElement handler, const struct Migrate *const migrate)

Use when the stack has pointers to another stack in the _Migrate_ function
 of the other datatype.

parameter: handler -- Has the responsibility of calling the other data type's
 migrate pointer function on all pointers affected by the _realloc_.

parameter: migrate -- Should only be called in a _Migrate_ function; pass the
 _migrate_ parameter.

order: O(_greatest size_)

fixme: Untested.



### <T>MigratePointer ###

static void <T>MigratePointer(T **const node_ptr,
	const struct Migrate *const migrate)

Use this inside the function that is passed to the (generally other's)
 migrate function. Allows pointers to the stack to be updated. It doesn't affect
 pointers not in the _realloc_ed region.

order: O(1)

fixme: Untested.



### <T>StackToString ###

static const char * <T>StackToString(const struct <T>Stack *const this)

Can print 4 things at once before it overwrites. One must stack
 _STACK_TO_STRING_ to a function implementing _<T>ToString_ to get this
 functionality.

return: Prints _this_ in a static buffer.

order: \Theta(1); it has a 255 character limit; every element takes some of it.




